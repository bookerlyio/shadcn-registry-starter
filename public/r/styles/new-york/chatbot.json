{
  "name": "chatbot",
  "type": "registry:ui",
  "dependencies": [
    "react-timeago",
    "@types/react-timeago",
    "@ai-sdk/anthropic",
    "@upstash/ratelimit",
    "@upstash/redis",
    "lucide-react",
    "ai"
  ],
  "files": [
    {
      "path": "ui/chatbot.tsx",
      "content": "\"use client\";\r\n\r\nimport React, { useEffect, useRef, useState } from \"react\";\r\nimport { useChat } from \"ai/react\";\r\nimport {\r\n  MessageSquare,\r\n  ChevronDown,\r\n  Sparkles,\r\n  Bot,\r\n  LucideIcon,\r\n} from \"lucide-react\";\r\n\r\nimport {\r\n  FaArrowUp as ArrowUp,\r\n  FaChevronLeft as ChevronLeft,\r\n} from \"react-icons/fa6\";\r\n\r\nimport { Button } from \"./button\";\r\nimport { Card } from \"./card\";\r\nimport { Input } from \"./input\";\r\nimport { ScrollArea } from \"./scroll-area\";\r\nimport { Avatar } from \"./avatar\";\r\n\r\nimport { useIsMobile } from \"@/hooks/use-mobile\";\r\nimport dynamic from \"next/dynamic\";\r\n\r\ninterface ChatMessage {\r\n  id: string;\r\n  role: \"function\" | \"assistant\" | \"system\" | \"user\" | \"data\" | \"tool\";\r\n  content: string;\r\n  createdAt: Date;\r\n  isTyping?: boolean;\r\n}\r\n\r\ninterface ChatBotProps {\r\n  fixed?: boolean;\r\n  open?: boolean;\r\n  initialMessage?: string;\r\n  title?: string;\r\n  description?: string;\r\n  descriptionIcon?: LucideIcon;\r\n  botIcon?: LucideIcon | string;\r\n  chatIcon?: LucideIcon | string;\r\n  placeholderText?: string;\r\n  position?: \"bottom-right\" | \"bottom-left\" | \"top-right\" | \"top-left\";\r\n  width?: string;\r\n  height?: string;\r\n  mobileFullScreen?: boolean;\r\n  showTimestamp?: boolean;\r\n  showAvatar?: boolean;\r\n  buttonRoundedCorners?: string;\r\n  animated?: boolean;\r\n  customStyles?: React.CSSProperties;\r\n  model?: string;\r\n  systemPrompt?: string;\r\n  onSendMessage?: (message: string) => void;\r\n  onReceiveMessage?: (message: string) => void;\r\n  onOpenChange?: (open: boolean) => void;\r\n}\r\n\r\nconst ClientTimeAgo = dynamic(() => import(\"react-timeago\"), {\r\n  ssr: false,\r\n});\r\n\r\nconst IconOrImage = ({\r\n  icon: IconOrUrl,\r\n  className = \"\",\r\n  imgClassName = \"\",\r\n}: {\r\n  icon: LucideIcon | string;\r\n  className?: string;\r\n  imgClassName?: string;\r\n}) => {\r\n  if (typeof IconOrUrl === \"string\") {\r\n    return <img src={IconOrUrl} alt=\"Icon\" className={imgClassName} />;\r\n  }\r\n  const Icon = IconOrUrl;\r\n  return <Icon className={className} />;\r\n};\r\n\r\nexport default function ChatBot({\r\n  fixed = true,\r\n  open = false,\r\n  initialMessage = \"ðŸ‘‹ Hey there! I'm an AI Chatbot.\\n\\nFeel free to ask me anything!\",\r\n  title = \"AI Chatbot\",\r\n  description = \"By druid/ui\",\r\n  descriptionIcon: DescriptionIcon = Sparkles,\r\n  botIcon: BotIcon = Bot,\r\n  chatIcon: ChatIcon = MessageSquare,\r\n  placeholderText = \"Ask a question...\",\r\n  position = \"bottom-right\",\r\n  width = \"400px\",\r\n  height = \"704px\",\r\n  mobileFullScreen = true,\r\n  showTimestamp = true,\r\n  showAvatar = true,\r\n  buttonRoundedCorners = \"rounded-full\",\r\n  animated = true,\r\n  customStyles = {},\r\n  model,\r\n  systemPrompt,\r\n  onSendMessage,\r\n  onReceiveMessage,\r\n  onOpenChange,\r\n}: ChatBotProps = {}) {\r\n  const isMobile = useIsMobile();\r\n  const [isOpen, setIsOpen] = useState(open);\r\n  const {\r\n    messages: rawChatMessages,\r\n    input,\r\n    handleInputChange,\r\n    handleSubmit: handleChatSubmit,\r\n    isLoading,\r\n  } = useChat({\r\n    initialMessages: [\r\n      {\r\n        id: \"1\",\r\n        role: \"assistant\",\r\n        content: initialMessage,\r\n        createdAt: new Date(Date.now()),\r\n      },\r\n    ],\r\n    keepLastMessageOnError: true,\r\n    api: \"/api/chat\",\r\n    body: {\r\n      systemPrompt,\r\n      model,\r\n    },\r\n  });\r\n\r\n  const chatMessages = rawChatMessages.map((message) => ({\r\n    ...message,\r\n    createdAt: message.createdAt || new Date(),\r\n  }));\r\n\r\n  const scrollRef = useRef<HTMLDivElement>(null);\r\n  const prevMessagesLength = useRef(chatMessages.length);\r\n  const [hasOverflow, setHasOverflow] = useState(false);\r\n  const [isScrolledTop, setIsScrolledTop] = useState(true);\r\n\r\n  useEffect(() => {\r\n    if (\r\n      scrollRef.current &&\r\n      prevMessagesLength.current !== chatMessages.length\r\n    ) {\r\n      const scrollArea = scrollRef.current.closest(\r\n        \"[data-radix-scroll-area-viewport]\"\r\n      );\r\n      if (scrollArea) {\r\n        scrollArea.scrollTo({\r\n          top: scrollArea.scrollHeight,\r\n          behavior: \"smooth\",\r\n        });\r\n      }\r\n      prevMessagesLength.current = chatMessages.length;\r\n    }\r\n  }, [chatMessages]);\r\n\r\n  useEffect(() => {\r\n    const scrollArea = scrollRef.current?.closest(\r\n      \"[data-radix-scroll-area-viewport]\"\r\n    );\r\n    if (scrollArea) {\r\n      setHasOverflow(scrollArea.scrollHeight > scrollArea.clientHeight);\r\n\r\n      const handleScroll = () => {\r\n        setIsScrolledTop(scrollArea.scrollTop === 0);\r\n      };\r\n\r\n      scrollArea.addEventListener(\"scroll\", handleScroll);\r\n      return () => scrollArea.removeEventListener(\"scroll\", handleScroll);\r\n    }\r\n  }, [chatMessages]);\r\n\r\n  const handleSubmit = async (e: React.FormEvent<HTMLFormElement>) => {\r\n    e.preventDefault();\r\n    if (onSendMessage) {\r\n      onSendMessage(input);\r\n    }\r\n\r\n    await handleChatSubmit(e);\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (onReceiveMessage && chatMessages.length > 0) {\r\n      const lastMessage = chatMessages[chatMessages.length - 1];\r\n      if (lastMessage.role === \"assistant\") {\r\n        onReceiveMessage(lastMessage.content);\r\n      }\r\n    }\r\n  }, [chatMessages, onReceiveMessage]);\r\n\r\n  const positionClasses = {\r\n    \"bottom-right\": {\r\n      button: \"bottom-4 right-4\",\r\n      chatbot: \"bottom-12 right-4\",\r\n    },\r\n    \"bottom-left\": {\r\n      button: \"bottom-4 left-4\",\r\n      chatbot: \"bottom-12 left-4\",\r\n    },\r\n    \"top-right\": {\r\n      button: \"top-4 right-4\",\r\n      chatbot: \"top-20 right-4\",\r\n    },\r\n    \"top-left\": {\r\n      button: \"top-4 left-4\",\r\n      chatbot: \"top-20 left-4\",\r\n    },\r\n  };\r\n\r\n  const buttonPositionClass = fixed ? positionClasses[position].button : \"\";\r\n\r\n  useEffect(() => {\r\n    setIsOpen(open);\r\n  }, [open]);\r\n\r\n  useEffect(() => {\r\n    onOpenChange?.(isOpen);\r\n  }, [isOpen, onOpenChange]);\r\n\r\n  const handleToggle = () => {\r\n    setIsOpen((prev) => !prev);\r\n  };\r\n\r\n  const TypingAnimation = () => (\r\n    <div className=\"flex space-x-1 p-4 bg-border/60 max-w-auto whitespace-pre-wrap rounded-md mr-8\">\r\n      <div className=\"w-1.5 h-1.5 bg-muted-foreground rounded-full animate-bounce [animation-delay:-0.3s]\" />\r\n      <div className=\"w-1.5 h-1.5 bg-muted-foreground rounded-full animate-bounce [animation-delay:-0.15s]\" />\r\n      <div className=\"w-1.5 h-1.5 bg-muted-foreground rounded-full animate-bounce\" />\r\n    </div>\r\n  );\r\n\r\n  useEffect(() => {\r\n    if (isMobile && mobileFullScreen && isOpen) {\r\n      document.body.style.overflow = \"hidden\";\r\n    } else {\r\n      document.body.style.overflow = \"\";\r\n    }\r\n\r\n    return () => {\r\n      document.body.style.overflow = \"\";\r\n    };\r\n  }, [isMobile, mobileFullScreen, isOpen]);\r\n\r\n  return (\r\n    <div\r\n      className={`transition-all duration-300 ease-in-out ${\r\n        fixed ? \"fixed\" : \"flex flex-col items-center\"\r\n      } ${fixed ? buttonPositionClass : \"\"} z-50`}\r\n      style={customStyles}\r\n    >\r\n      {!isOpen ? (\r\n        <Button\r\n          onClick={handleToggle}\r\n          className={`${buttonRoundedCorners} h-12 w-12 p-0 shadow-[0_0_30px_rgba(0,0,0,0.1)] bg-primary ${\r\n            animated ? \"hover:scale-110 transition-all duration-300\" : \"\"\r\n          } ${!fixed ? buttonPositionClass : \"\"}`}\r\n        >\r\n          <IconOrImage\r\n            icon={ChatIcon}\r\n            className=\"h-[22px] w-[22px] text-primary-foreground fill-primary-foreground\"\r\n            imgClassName=\"h-[22px] w-[22px] object-contain\"\r\n          />\r\n        </Button>\r\n      ) : (\r\n        <>\r\n          <Card\r\n            className={`border-none ${fixed ? \"fixed mb-8\" : \"mb-4\"} ${\r\n              isMobile && mobileFullScreen && fixed\r\n                ? \"bottom-0 right-0 w-full h-[100dvh] rounded-none mb-0\"\r\n                : `rounded-md ${\r\n                    !isMobile ? positionClasses[position].chatbot : \"\"\r\n                  } max-h-[calc(100vh-6rem)]` // equivalent of pt-4\r\n            } flex flex-col shadow-[0_0_45px_rgba(0,0,0,0.15)] overflow-hidden ${\r\n              animated ? \"animate-in slide-in-from-bottom-2 duration-200\" : \"\"\r\n            }`}\r\n            style={{\r\n              ...(fixed\r\n                ? {\r\n                    width: !isMobile || !mobileFullScreen ? width : undefined,\r\n                  }\r\n                : { maxWidth: width }),\r\n              height:\r\n                !isMobile || !mobileFullScreen || !fixed\r\n                  ? isMobile && !fixed\r\n                    ? \"475px\"\r\n                    : height\r\n                  : undefined,\r\n            }}\r\n          >\r\n            <div\r\n              className={`flex bg-background items-center p-4 relative z-20 ${\r\n                hasOverflow && !isScrolledTop ? \"border-b\" : \"\"\r\n              }`}\r\n            >\r\n              <Button\r\n                variant=\"ghost\"\r\n                size=\"icon\"\r\n                onClick={handleToggle}\r\n                className=\"mr-2 z-20\"\r\n              >\r\n                <ChevronLeft className=\"h-12 w-12\" />\r\n              </Button>\r\n              <div className=\"flex-1\">\r\n                <div\r\n                  className={`absolute inset-0 flex justify-center items-center transition-all duration-200 ${\r\n                    isScrolledTop\r\n                      ? \"opacity-100 visible delay-200\"\r\n                      : \"opacity-0 invisible delay-0 pointer-events-none\"\r\n                  }`}\r\n                >\r\n                  <span className=\"font-semibold\">Amtivo Chatbot</span>\r\n                </div>\r\n                <div\r\n                  className={`flex items-center transition-all duration-200 ${\r\n                    isScrolledTop\r\n                      ? \"opacity-0 invisible delay-0 pointer-events-none\"\r\n                      : \"opacity-100 visible delay-200\"\r\n                  }`}\r\n                >\r\n                  {showAvatar && (\r\n                    <Avatar\r\n                      className={`h-8 w-8 bg-border/60 rounded-md flex items-center justify-center`}\r\n                    >\r\n                      <IconOrImage\r\n                        icon={BotIcon}\r\n                        className=\"h-6 w-6 text-accent-foreground\"\r\n                        imgClassName=\"h-6 w-6 object-contain\"\r\n                      />\r\n                    </Avatar>\r\n                  )}\r\n                  <div className=\"flex flex-col ml-4\">\r\n                    <h3 className=\"font-semibold text-base leading-none\">\r\n                      {title}\r\n                    </h3>\r\n                    <div className=\"flex items-center gap-1 mt-1\">\r\n                      <DescriptionIcon className=\"h-3 w-3\" />\r\n                      <span className=\"text-xs text-muted-foreground\">\r\n                        {description}\r\n                      </span>\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            </div>\r\n\r\n            <ScrollArea className=\"flex-1 px-4 relative z-0 overflow-hidden\">\r\n              <div className=\"flex flex-col justify-start space-y-4 mt-4 -pb-4 -mb-8\">\r\n                <div className=\"flex flex-col items-center justify-center mb-6\">\r\n                  <Avatar\r\n                    className={`h-20 w-20 rounded-md bg-border/60 flex items-center justify-center`}\r\n                  >\r\n                    <IconOrImage\r\n                      icon={BotIcon}\r\n                      className=\"h-16 w-16 text-accent-foreground\"\r\n                      imgClassName=\"h-16 w-16 object-contain\"\r\n                    />\r\n                  </Avatar>\r\n                  <p className=\"font-normal my-2\">AI Agent answers instantly</p>\r\n                  <p className=\"font-light text-muted-foreground\">\r\n                    Ask for the team if needed\r\n                  </p>\r\n                </div>\r\n\r\n                {chatMessages.map((message: ChatMessage, index) => (\r\n                  <div\r\n                    key={message.id}\r\n                    className={`flex flex-col ${\r\n                      message.role === \"user\" ? \"items-end\" : \"items-start\"\r\n                    }`}\r\n                  >\r\n                    <div\r\n                      className={`flex relative ${\r\n                        message.role === \"user\"\r\n                          ? \"justify-end\"\r\n                          : \"justify-start items-end gap-3\"\r\n                      }`}\r\n                    >\r\n                      {showAvatar && message.role !== \"user\" && (\r\n                        <Avatar\r\n                          className={`h-8 w-8 bg-border/60 rounded-md flex items-center justify-center`}\r\n                        >\r\n                          <IconOrImage\r\n                            icon={BotIcon}\r\n                            className=\"h-6 w-6 text-accent-foreground\"\r\n                            imgClassName=\"h-6 w-6 object-contain\"\r\n                          />\r\n                        </Avatar>\r\n                      )}\r\n\r\n                      <div className=\"group relative\">\r\n                        <div\r\n                          className={`p-4 max-w-auto whitespace-pre-wrap rounded-md ${\r\n                            message.role === \"user\"\r\n                              ? \"bg-primary text-primary-foreground ml-8\"\r\n                              : \"bg-border/70 mr-8 font-light font-inter text-md\"\r\n                          }`}\r\n                        >\r\n                          {message.content}\r\n                        </div>\r\n\r\n                        {showTimestamp && (\r\n                          <Card\r\n                            className={`absolute -top-10 left-0 ${\r\n                              animated\r\n                                ? \"opacity-0 group-hover:opacity-100 transition-opacity duration-200\"\r\n                                : \"\"\r\n                            } p-2 text-xs`}\r\n                          >\r\n                            {(() => {\r\n                              const date = message.createdAt;\r\n                              const now = new Date();\r\n                              const isToday =\r\n                                date.toDateString() === now.toDateString();\r\n                              const isThisYear =\r\n                                date.getFullYear() === now.getFullYear();\r\n\r\n                              if (isToday) {\r\n                                return date.toLocaleTimeString(\"en-US\", {\r\n                                  hour: \"numeric\",\r\n                                  minute: \"2-digit\",\r\n                                  hour12: true,\r\n                                });\r\n                              } else if (isThisYear) {\r\n                                return date.toLocaleDateString(\"en-US\", {\r\n                                  month: \"short\",\r\n                                  day: \"numeric\",\r\n                                });\r\n                              } else {\r\n                                return date.toLocaleDateString(\"en-US\", {\r\n                                  month: \"short\",\r\n                                  day: \"numeric\",\r\n                                  year: \"2-digit\",\r\n                                });\r\n                              }\r\n                            })()}\r\n                          </Card>\r\n                        )}\r\n                      </div>\r\n                    </div>\r\n                    {showTimestamp &&\r\n                      index === chatMessages.length - 1 &&\r\n                      message.role === \"assistant\" && (\r\n                        <div className=\"text-xs text-muted-foreground mt-1 text-left ml-11 mb-4\">\r\n                          Bot Â·{\" \"}\r\n                          <ClientTimeAgo\r\n                            date={message.createdAt}\r\n                            formatter={(value, unit) => {\r\n                              if (unit === \"second\" && value < 60) {\r\n                                return \"Just now\";\r\n                              }\r\n                              return `${value} ${unit}${\r\n                                value !== 1 ? \"s\" : \"\"\r\n                              } ago`;\r\n                            }}\r\n                          />\r\n                          .\r\n                        </div>\r\n                      )}\r\n                  </div>\r\n                ))}\r\n                <div ref={scrollRef} />\r\n                {isLoading &&\r\n                  (!chatMessages.length ||\r\n                    chatMessages[chatMessages.length - 1].role !==\r\n                      \"assistant\") && (\r\n                    <div className=\"flex flex-col items-start\">\r\n                      <div className=\"flex items-start gap-3\">\r\n                        {showAvatar && (\r\n                          <Avatar\r\n                            className={`h-8 w-8 bg-border/60 rounded-md flex items-center justify-center`}\r\n                          >\r\n                            <IconOrImage\r\n                              icon={BotIcon}\r\n                              className=\"h-6 w-6 text-accent-foreground\"\r\n                              imgClassName=\"h-6 w-6 object-contain\"\r\n                            />\r\n                          </Avatar>\r\n                        )}\r\n                        <div className=\"group relative\">\r\n                          <TypingAnimation />\r\n                        </div>\r\n                      </div>\r\n                      <div className=\"text-xs text-muted-foreground mt-1 text-left ml-11 mb-4\">\r\n                        Bot Â· thinking...\r\n                      </div>\r\n                    </div>\r\n                  )}\r\n              </div>\r\n            </ScrollArea>\r\n\r\n            <form onSubmit={handleSubmit} className=\"px-4 pb-4 bg-background\">\r\n              <div className=\"relative flex items-center w-full rounded-full shadow-[0_0_10px_rgba(0,0,0,0.075)]\">\r\n                <Input\r\n                  placeholder={placeholderText}\r\n                  name=\"prompt\"\r\n                  value={input}\r\n                  onChange={handleInputChange}\r\n                  className=\"w-full rounded-full pr-14 py-6 text-base leading-normal\"\r\n                />\r\n                <div className=\"absolute right-2 flex items-center\">\r\n                  <Button\r\n                    type=\"submit\"\r\n                    size=\"icon\"\r\n                    disabled={!input.trim() || isLoading}\r\n                    className=\"h-9 w-9 rounded-full bg-primary hover:bg-primary/90\"\r\n                  >\r\n                    <ArrowUp className=\"h-4 w-4\" />\r\n                  </Button>\r\n                </div>\r\n              </div>\r\n            </form>\r\n          </Card>\r\n          <Button\r\n            onClick={handleToggle}\r\n            className={`${buttonRoundedCorners} h-12 w-12 p-0 shadow-lg bg-primary ${\r\n              animated ? \"hover:scale-110 transition-all duration-300\" : \"\"\r\n            } ${isMobile ? \"m-4\" : \"\"} ${!fixed ? buttonPositionClass : \"\"}`}\r\n          >\r\n            <ChevronDown\r\n              style={{ width: \"22px\", height: \"22px\", fill: \"currentColor\" }}\r\n              className={`text-primary-foreground ${\r\n                animated\r\n                  ? \"transition-transform duration-300 -rotate-45 animate-out [animation-fill-mode:forwards]\"\r\n                  : \"\"\r\n              }`}\r\n            />\r\n          </Button>\r\n        </>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n",
      "type": "registry:ui"
    },
    {
      "path": "api/chat/route.ts",
      "content": "import { anthropic } from \"@ai-sdk/anthropic\";\r\nimport { streamText } from \"ai\";\r\nimport { Ratelimit } from \"@upstash/ratelimit\";\r\nimport { Redis } from \"@upstash/redis\";\r\n\r\nconst redis = Redis.fromEnv();\r\n\r\nconst ratelimit = new Ratelimit({\r\n  redis: redis,\r\n  limiter: Ratelimit.slidingWindow(10, \"1 d\"), // 10 messages or 1 d\r\n});\r\n\r\nexport async function POST(req: Request) {\r\n  const ip = req.headers.get(\"x-forwarded-for\") ?? \"127.0.0.1\";\r\n\r\n  // Check if the IP is blocked\r\n  const isBlocked = await redis.get(ip);\r\n  if (isBlocked) {\r\n    return new Response(\r\n      \"You have reached the message limit for today. Install me, use your own API key, and enjoy!\",\r\n      { status: 429 }\r\n    );\r\n  }\r\n\r\n  try {\r\n    const { success } = await ratelimit.limit(ip);\r\n    if (!success) {\r\n      await redis.set(ip, \"blocked\", { ex: 86400 }); // 1 d\r\n\r\n      return new Response(\r\n        \"You have reached the message limit for today. Install me, use your own API key, and enjoy!\",\r\n        { status: 429 }\r\n      );\r\n    }\r\n  } catch (error) {\r\n    console.error(error);\r\n    return new Response(\"An error occurred while processing your request.\", {\r\n      status: 500,\r\n    });\r\n  }\r\n\r\n  const { messages, systemPrompt, model } = await req.json();\r\n\r\n  const botResponse = await streamText({\r\n    model: model ? anthropic(model) : anthropic(\"claude-3-5-haiku-20241022\"),\r\n    system:\r\n      systemPrompt ||\r\n      `You are a chatbot AI assistant. You must:\r\n- Politely decline to discuss any topics outside of our services.\r\n- Maintain a friendly, professional tone.\r\n- Keep responses concise and focused on solving customer inquiries.\r\n- Keep responses to 20 words or less, but go to up to a maximum of 50 words if you are explaining something or need to in order to answer a query.`,\r\n    messages,\r\n  });\r\n\r\n  return botResponse.toDataStreamResponse();\r\n}\r\n",
      "type": "registry:page",
      "target": "app/api/chat/route.ts"
    },
    {
      "path": "hooks/use-mobile.tsx",
      "content": "import * as React from \"react\"\r\n\r\nconst MOBILE_BREAKPOINT = 768\r\n\r\nexport function useIsMobile() {\r\n  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)\r\n\r\n  React.useEffect(() => {\r\n    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)\r\n    const onChange = () => {\r\n      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\r\n    }\r\n    mql.addEventListener(\"change\", onChange)\r\n    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\r\n    return () => mql.removeEventListener(\"change\", onChange)\r\n  }, [])\r\n\r\n  return isMobile\r\n}\r\n",
      "type": "registry:hook"
    }
  ]
}