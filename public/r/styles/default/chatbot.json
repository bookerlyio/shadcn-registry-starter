{
  "name": "chatbot",
  "type": "registry:ui",
  "dependencies": [
    "react-timeago",
    "@types/react-timeago",
    "@ai-sdk/anthropic",
    "lucide-react",
    "ai"
  ],
  "files": [
    {
      "path": "ui/chatbot.tsx",
      "content": "\"use client\";\r\n\r\nimport React, { useEffect, useRef, useState } from \"react\";\r\nimport { useChat } from \"ai/react\";\r\nimport TimeAgo from \"react-timeago\";\r\nimport {\r\n  MessageCircle,\r\n  ChevronDown,\r\n  Send,\r\n  ChevronLeft,\r\n  Sparkles,\r\n  Bot,\r\n  LucideIcon,\r\n} from \"lucide-react\";\r\n\r\nimport { Button } from \"./button\";\r\nimport { Card } from \"./card\";\r\nimport { Input } from \"./input\";\r\nimport { ScrollArea } from \"./scroll-area\";\r\nimport { Avatar, AvatarFallback } from \"./avatar\";\r\n\r\nimport { useIsMobile } from \"@/hooks/use-mobile\";\r\n\r\ninterface ChatMessage {\r\n  id: string;\r\n  role: \"function\" | \"assistant\" | \"system\" | \"user\" | \"data\" | \"tool\";\r\n  content: string;\r\n  createdAt: Date;\r\n}\r\n\r\ninterface ChatBotProps {\r\n  initialMessage?: string;\r\n  title?: string;\r\n  description?: string;\r\n  descriptionIcon?: LucideIcon;\r\n  botIcon?: LucideIcon;\r\n  chatIcon?: LucideIcon;\r\n  placeholderText?: string;\r\n  position?: \"bottom-right\" | \"bottom-left\" | \"top-right\" | \"top-left\";\r\n  width?: string;\r\n  height?: string;\r\n  mobileFullScreen?: boolean;\r\n  showTimestamp?: boolean;\r\n  showAvatar?: boolean;\r\n  roundedCorners?:\r\n    | \"rounded-none\"\r\n    | \"rounded-sm\"\r\n    | \"rounded-md\"\r\n    | \"rounded-lg\"\r\n    | \"rounded-xl\"\r\n    | \"rounded-full\";\r\n  buttonRoundedCorners?:\r\n    | \"rounded-none\"\r\n    | \"rounded-sm\"\r\n    | \"rounded-md\"\r\n    | \"rounded-lg\"\r\n    | \"rounded-xl\"\r\n    | \"rounded-full\";\r\n  animated?: boolean;\r\n  customStyles?: React.CSSProperties;\r\n  onSendMessage?: (message: string) => void;\r\n  onReceiveMessage?: (message: string) => void;\r\n}\r\n\r\nexport default function ChatBot({\r\n  initialMessage = \"ðŸ‘‹ Hey there! I'm an AI Chatbot.\\n\\nFeel free to ask me anything!\",\r\n  title = \"Chatbot\",\r\n  description = \"AI Agent\",\r\n  descriptionIcon: DescriptionIcon = Sparkles,\r\n  botIcon: BotIcon = Bot,\r\n  chatIcon: ChatIcon = MessageCircle,\r\n  placeholderText = \"Ask a question...\",\r\n  position = \"bottom-right\",\r\n  width = \"400px\",\r\n  height = \"600px\",\r\n  mobileFullScreen = true,\r\n  showTimestamp = true,\r\n  showAvatar = true,\r\n  roundedCorners = \"rounded-md\",\r\n  buttonRoundedCorners = \"rounded-full\",\r\n  animated = true,\r\n  customStyles = {},\r\n  onSendMessage,\r\n  onReceiveMessage,\r\n}: ChatBotProps = {}) {\r\n  const isMobile = useIsMobile();\r\n  const [isOpen, setIsOpen] = useState(false);\r\n  const {\r\n    messages: rawChatMessages,\r\n    input,\r\n    handleInputChange,\r\n    handleSubmit: handleChatSubmit,\r\n  } = useChat({\r\n    initialMessages: [\r\n      {\r\n        id: \"1\",\r\n        role: \"assistant\",\r\n        content: initialMessage,\r\n        createdAt: new Date(),\r\n      },\r\n    ],\r\n    keepLastMessageOnError: true,\r\n  });\r\n\r\n  const chatMessages = rawChatMessages.map((message) => ({\r\n    ...message,\r\n    createdAt: message.createdAt || new Date(),\r\n  }));\r\n\r\n  const scrollRef = useRef<HTMLDivElement>(null);\r\n  const userScrollRef = useRef(false);\r\n\r\n  const handleScroll = (event: React.UIEvent<HTMLDivElement>) => {\r\n    const scrollArea = event.currentTarget.querySelector(\r\n      \"[data-radix-scroll-area-viewport]\"\r\n    );\r\n    if (!scrollArea) return;\r\n    const isScrolledToBottom =\r\n      Math.abs(\r\n        scrollArea.scrollHeight - scrollArea.scrollTop - scrollArea.clientHeight\r\n      ) < 25;\r\n    userScrollRef.current = !isScrolledToBottom;\r\n  };\r\n\r\n  const isNearBottom = () => {\r\n    const scrollArea =\r\n      scrollRef.current?.parentElement?.parentElement?.querySelector(\r\n        \"[data-radix-scroll-area-viewport]\"\r\n      );\r\n    if (!scrollArea) return true;\r\n    return (\r\n      Math.abs(\r\n        scrollArea.scrollHeight - scrollArea.scrollTop - scrollArea.clientHeight\r\n      ) < 25\r\n    );\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (scrollRef.current && (!userScrollRef.current || isNearBottom())) {\r\n      const timeoutId = setTimeout(() => {\r\n        scrollRef.current?.scrollIntoView({\r\n          behavior: animated ? \"smooth\" : \"auto\",\r\n          block: \"end\",\r\n        });\r\n      }, 100);\r\n      return () => clearTimeout(timeoutId);\r\n    }\r\n  }, [chatMessages, animated]);\r\n\r\n  const handleSubmit = (e: React.FormEvent<HTMLFormElement>) => {\r\n    e.preventDefault();\r\n    if (onSendMessage) {\r\n      onSendMessage(input);\r\n    }\r\n    handleChatSubmit(e);\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (onReceiveMessage && chatMessages.length > 0) {\r\n      const lastMessage = chatMessages[chatMessages.length - 1];\r\n      if (lastMessage.role === \"assistant\") {\r\n        onReceiveMessage(lastMessage.content);\r\n      }\r\n    }\r\n  }, [chatMessages, onReceiveMessage]);\r\n\r\n  const positionClass = {\r\n    \"bottom-right\": \"bottom-6 right-6\",\r\n    \"bottom-left\": \"bottom-6 left-6\",\r\n    \"top-right\": \"top-6 right-6\",\r\n    \"top-left\": \"top-6 left-6\",\r\n  }[position];\r\n\r\n  return (\r\n    <div\r\n      className={`fixed ${\r\n        isMobile ? \"bottom-0 right-0 left-0 m-0\" : positionClass\r\n      } z-50 flex justify-end`}\r\n      style={customStyles}\r\n    >\r\n      {!isOpen && (\r\n        <Button\r\n          onClick={() => setIsOpen(true)}\r\n          className={`${buttonRoundedCorners} h-12 w-12 p-0 shadow-lg bg-primary ${\r\n            animated ? \"hover:scale-110 transition-all duration-300\" : \"\"\r\n          } ${isMobile ? \"mr-4 mb-4\" : \"\"}`}\r\n        >\r\n          <ChatIcon\r\n            style={{ width: \"22px\", height: \"22px\", fill: \"currentColor\" }}\r\n            className={`text-primary-foreground ${\r\n              animated\r\n                ? \"transition-transform duration-300 rotate-45 scale-[0.15] animate-out [animation-fill-mode:forwards]\"\r\n                : \"\"\r\n            }`}\r\n            data-state={isOpen ? \"open\" : \"closed\"}\r\n          />\r\n        </Button>\r\n      )}\r\n\r\n      {isOpen && (\r\n        <>\r\n          <Button\r\n            onClick={() => setIsOpen(false)}\r\n            className={`${buttonRoundedCorners} h-12 w-12 p-0 shadow-lg bg-primary ${\r\n              animated ? \"hover:scale-110 transition-all duration-300\" : \"\"\r\n            } ${isMobile ? \"mx-4 mb-4\" : \"\"}`}\r\n          >\r\n            <ChevronDown\r\n              style={{ width: \"22px\", height: \"22px\", fill: \"currentColor\" }}\r\n              className={`text-primary-foreground ${\r\n                animated\r\n                  ? \"transition-transform duration-300 -rotate-45 animate-out [animation-fill-mode:forwards]\"\r\n                  : \"\"\r\n              }`}\r\n            />\r\n          </Button>\r\n          <Card\r\n            className={`absolute ${\r\n              isMobile && mobileFullScreen\r\n                ? \"bottom-0 right-0 left-0 w-full h-[100dvh] rounded-none\"\r\n                : `bottom-16 right-0 ${roundedCorners}`\r\n            } flex flex-col shadow-xl overflow-hidden ${\r\n              animated ? \"animate-in slide-in-from-bottom-2 duration-200\" : \"\"\r\n            }`}\r\n            style={{\r\n              width: !isMobile || !mobileFullScreen ? width : undefined,\r\n              height: !isMobile || !mobileFullScreen ? height : undefined,\r\n            }}\r\n          >\r\n            <div\r\n              className={`flex bg-background items-center p-4 border-b relative z-20`}\r\n            >\r\n              <Button\r\n                variant=\"ghost\"\r\n                size=\"icon\"\r\n                onClick={() => setIsOpen(false)}\r\n                className=\"mr-2\"\r\n              >\r\n                <ChevronLeft className=\"h-5 w-5\" />\r\n              </Button>\r\n              {showAvatar && (\r\n                <Avatar className={`h-8 w-8 bg-accent ${roundedCorners}`}>\r\n                  <AvatarFallback className={roundedCorners}>\r\n                    <BotIcon className=\"h-6 w-6 text-accent-foreground\" />\r\n                  </AvatarFallback>\r\n                </Avatar>\r\n              )}\r\n              <div className=\"flex flex-col ml-4\">\r\n                <h3 className=\"font-semibold text-base leading-none\">\r\n                  {title}\r\n                </h3>\r\n                <div className=\"flex items-center gap-1 mt-1\">\r\n                  <DescriptionIcon className=\"h-3 w-3\" />\r\n                  <span className=\"text-xs text-muted-foreground\">\r\n                    {description}\r\n                  </span>\r\n                </div>\r\n              </div>\r\n            </div>\r\n\r\n            <ScrollArea\r\n              className=\"flex-1 px-4 relative z-0 overflow-hidden\"\r\n              onScroll={handleScroll}\r\n            >\r\n              <div className=\"flex flex-col justify-start h-full space-y-4 mt-4 -mb-4\">\r\n                {chatMessages.map((message: ChatMessage, index) => (\r\n                  <div\r\n                    key={message.id}\r\n                    className={`flex flex-col ${\r\n                      message.role === \"user\" ? \"items-end\" : \"items-start\"\r\n                    }`}\r\n                  >\r\n                    <div\r\n                      className={`flex relative ${\r\n                        message.role === \"user\"\r\n                          ? \"justify-end\"\r\n                          : \"justify-start items-start gap-3\"\r\n                      }`}\r\n                    >\r\n                      {showAvatar && message.role !== \"user\" && (\r\n                        <Avatar\r\n                          className={`h-8 w-8 bg-accent ${roundedCorners}`}\r\n                        >\r\n                          <AvatarFallback className={roundedCorners}>\r\n                            <BotIcon className=\"h-6 w-6 text-accent-foreground\" />\r\n                          </AvatarFallback>\r\n                        </Avatar>\r\n                      )}\r\n\r\n                      <div className=\"group relative\">\r\n                        <div\r\n                          className={`p-4 max-w-auto whitespace-pre-wrap ${roundedCorners} ${\r\n                            message.role === \"user\"\r\n                              ? \"bg-primary text-primary-foreground ml-8\"\r\n                              : \"bg-accent mr-8\"\r\n                          }`}\r\n                        >\r\n                          {message.content}\r\n                        </div>\r\n\r\n                        {showTimestamp && (\r\n                          <Card\r\n                            className={`absolute -top-10 left-0 ${\r\n                              animated\r\n                                ? \"opacity-0 group-hover:opacity-100 transition-opacity duration-200\"\r\n                                : \"\"\r\n                            } p-2 text-xs`}\r\n                          >\r\n                            {(() => {\r\n                              const date = message.createdAt;\r\n                              const now = new Date();\r\n                              const isToday =\r\n                                date.toDateString() === now.toDateString();\r\n                              const isThisYear =\r\n                                date.getFullYear() === now.getFullYear();\r\n\r\n                              if (isToday) {\r\n                                return date.toLocaleTimeString(\"en-US\", {\r\n                                  hour: \"numeric\",\r\n                                  minute: \"2-digit\",\r\n                                  hour12: true,\r\n                                });\r\n                              } else if (isThisYear) {\r\n                                return date.toLocaleDateString(\"en-US\", {\r\n                                  month: \"short\",\r\n                                  day: \"numeric\",\r\n                                });\r\n                              } else {\r\n                                return date.toLocaleDateString(\"en-US\", {\r\n                                  month: \"short\",\r\n                                  day: \"numeric\",\r\n                                  year: \"2-digit\",\r\n                                });\r\n                              }\r\n                            })()}\r\n                          </Card>\r\n                        )}\r\n                      </div>\r\n                    </div>\r\n                    {showTimestamp &&\r\n                      index === chatMessages.length - 1 &&\r\n                      message.role === \"assistant\" && (\r\n                        <div className=\"text-xs text-muted-foreground mt-1 text-left ml-11\">\r\n                          Bot Â·{\" \"}\r\n                          <TimeAgo\r\n                            date={message.createdAt}\r\n                            formatter={(value, unit) => {\r\n                              if (unit === \"second\" && value < 60) {\r\n                                return \"Just now\";\r\n                              }\r\n                              return `${value} ${unit}${\r\n                                value !== 1 ? \"s\" : \"\"\r\n                              } ago`;\r\n                            }}\r\n                          />\r\n                          .\r\n                        </div>\r\n                      )}\r\n                  </div>\r\n                ))}\r\n                <div ref={scrollRef} />\r\n              </div>\r\n            </ScrollArea>\r\n\r\n            <form\r\n              onSubmit={handleSubmit}\r\n              className={`p-4 border-t flex gap-4 bg-background`}\r\n            >\r\n              <Input\r\n                placeholder={placeholderText}\r\n                name=\"prompt\"\r\n                value={input}\r\n                onChange={handleInputChange}\r\n                className={`text-md ${roundedCorners}`}\r\n              />\r\n              <Button\r\n                type=\"submit\"\r\n                className={`${roundedCorners} h-10 w-10 min-w-[40px] p-0 flex items-center justify-center`}\r\n              >\r\n                <Send className={`h-4 w-4`} />\r\n              </Button>\r\n            </form>\r\n          </Card>\r\n        </>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n",
      "type": "registry:ui"
    },
    {
      "path": "api/chat/route.ts",
      "content": "import { anthropic } from \"@ai-sdk/anthropic\";\r\nimport { streamText } from \"ai\";\r\n\r\n// Allow streaming responses up to 30 seconds\r\nexport const maxDuration = 30;\r\n\r\nexport async function POST(req: Request) {\r\n  const { messages } = await req.json();\r\n\r\n  const result = await streamText({\r\n    model: anthropic(\"claude-3-5-haiku-20241022\"),\r\n    system: `You are a chatbot AI assistant. You must:\r\n- Politely decline to discuss any topics outside of our services.\r\n- Maintain a friendly, professional tone.\r\n- Keep responses concise and focused on solving customer inquiries.\r\n- Keep responses to 20 words or less, but go to up to a maximum of 50 words if you are explaining something or need to in order to answer a query.`,\r\n    messages,\r\n  });\r\n\r\n  return result.toDataStreamResponse();\r\n}\r\n",
      "type": "registry:page",
      "target": "app/api/chat/route.ts"
    },
    {
      "path": "hooks/use-mobile.tsx",
      "content": "import * as React from \"react\"\r\n\r\nconst MOBILE_BREAKPOINT = 768\r\n\r\nexport function useIsMobile() {\r\n  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)\r\n\r\n  React.useEffect(() => {\r\n    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)\r\n    const onChange = () => {\r\n      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\r\n    }\r\n    mql.addEventListener(\"change\", onChange)\r\n    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\r\n    return () => mql.removeEventListener(\"change\", onChange)\r\n  }, [])\r\n\r\n  return isMobile\r\n}\r\n",
      "type": "registry:hook"
    }
  ]
}